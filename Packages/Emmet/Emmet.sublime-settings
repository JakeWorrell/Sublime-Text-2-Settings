{
	// Copy any modified settings to `User/Emmet.sublime-settings`
	// otherwise modifications will not survive updates.
	"extensions_path": "~/emmet",

	// Disable completions of HTML attributes
	// with this option disabled, you can get attribute list completions
	// inside opening HTML tags.
	// WARNING: with this option disabled, Tab key expander will not
	// work inside opening HTML attributes
	"disable_completions": false,

	// Remove default HTML tag completions on plugin start
	// You should restart editor after changing this option
	"remove_html_completions": false,

	// A comma-separated list of scopes where Emmet’s Tab key
	// abbreviation expander should be disabled	 
	"disable_tab_abbreviations_for_scopes": "",

	// A regexp for scope name: if it matches, Tab handler won’t work
	// The reason to use this preference is that ST2 has buggy scope matcher
	// which may still trigger Tab handler even if it's restricted by context
	"disable_tab_abbreviations_for_regexp": "source\\..+?\\stext\\.html",

	// Exit tabstop mode when enter key is pressed
	"clear_fields_on_enter_key": true,

	// List of HTML and XML scopes where Enter key should insert formatted 
	// (e.g. with indentation) line break
	"formatted_linebreak_scopes": "meta.scope.between-tag-pair.html, meta.scope.between-tag-pair.xml",

	// A comma-separated list of disabled action names.
	// Listed action will not be triggered by default keyboard
	// shortcut.
	// Use "all" value to disable all shortcuts at once
	"disabled_keymap_actions": "",

	// By default, Emmet overrides Tab key to effectively expand abbreviations.
	// The downside of this approach is that you can’t expand regular ST2
	// snippets (like `php`). Since it’s not currently possible to get a list
	// of ST2 snippets via API, you can provide a list of scopes where Emmet’s
	// Tab trigger should be disabled when expanding simple abbreviation.
	// If entered abbreviation (like `php`) wasn’t found in Emmet snippets list
	// or "known_html_tags" preference, Tab handler will not be triggered.
	// Leave this setting black to disable this feature
	"disabled_single_snippet_for_scopes": "text.html",

	// A space separated list of all known HTML tags,
	// used together with "disabled_on_single_snippets" option
	"known_html_tags": "html head title base link meta style script noscript body section nav article aside h1 h2 h3 h4 h5 h6 hgroup header footer address p hr pre blockquote ol ul li dl dt dd figure figcaption div a em strong small s cite q dfn abbr data time code var samp kbd sub sup i b u mark ruby rt rp bdi bdo span br wbr ins del img iframe embed object param video audio source track canvas map area svg math table caption colgroup col tbody thead tfoot tr td th form fieldset legend label input button select datalist optgroup option textarea keygen output progress meter details summary command menu",

	// If set to `true`, Emmet will automatically insert final tabstop
	// at the end of expanded abbreviation
	"insert_final_tabstop": false,

	// Try to automatically detect XHTML dialect in HTML documents.
	// With this option enabled, your custom profile for HTML documents may not work.
	"autodetect_xhtml": true,

	// Custom snippets definitions, as per https://github.com/sergeche/zen-coding/blob/v0.7.1/snippets.json
	"snippets": {
		// "html": {
		// 	"abbreviations": {
		// 		"example": "<div class='example' title='Custom element example'>"
		// 	}
		// }
	},

	// Core preferences
	"preferences": {
		// Defines a symbol that should be placed between CSS property and
		// value when expanding CSS abbreviations.
		"css.valueSeparator": ": ",

		// Defines a symbol that should be placed at the end of CSS property
		// when expanding CSS abbreviations.
		"css.propertyEnd": ";",

		// Automatically generate vendor-prefixed copies of expanded CSS
		// property. By default, Emmet will generate vendor-prefixed
		// properties only when you put dash before abbreviation
		// (e.g. <code>-bxsh</code>). With this option enabled, you don’t
		// need dashes before abbreviations: Emmet will produce
		// vendor-prefixed properties for you.
		"css.autoInsertVendorPrefixes": true,

		// Indentation before closing brace of CSS rule. Some users prefere
		// indented closing brace of CSS rule for better readability.
		// This preference’s value will be automatically inserted before
		// closing brace when user adds newline in newly created CSS rule
		// (e.g. when “Insert formatted linebreak” action will be performed
		// in CSS file). If you’re such user, you may want to write put a value
		// like <code>\\n\\t</code> in this preference.
		"css.closeBraceIndentation": "\n",

		// The list of properties whose values ​​must not contain units.
		"css.unitlessProperties": "z-index, line-height, opacity, font-weight",

		// A comma-separated list of vendor-prefixes for which values should
		// be generated.
		"css.gradient.prefixes" : "webkit, moz, o",

		// Generate gradient definition for old Webkit implementations
		"css.gradient.oldWebkit" : true,

		// Do not output default direction definition in generated gradients.
		"css.gradient.omitDefaultDirection" : true,

		// Defines a symbol that should be placed between CSS property and
		// value when expanding CSS abbreviations in Stylus dialect.
		"stylus.valueSeparator": " ",

		// Defines a symbol that should be placed at the end of CSS property
		// when expanding CSS abbreviations in Stylus dialect.
		"stylus.propertyEnd": "",

		// Defines a symbol that should be placed at the end of CSS property
		// when expanding CSS abbreviations in SASS dialect.
		"sass.propertyEnd": "",

		// Class name’s element separator.
		"bem.elementSeparator" : "__", 

		// Class name’s modifier separator.
		"bem.modifierSeparator": "_", 

		// Symbol for describing short “block-element” notation. Class names
		// prefixed with this symbol will be treated as element name for parent‘s
		// block name. Each symbol instance traverses one level up in parsed
		// tree for block name lookup. Empty value will disable short notation.
		"bem.shortElementPrefix": "-", 

		// A definition of comment that should be placed <i>after</i> matched
		// element when <code>comment</code> filter is applied. This definition
		// is an ERB-style template passed to <code>_.template()</code>
		// function (see Underscore.js docs for details). In template context,
		// the following properties and functions are availabe:\n
		// <ul>
		// 	<li><code>attr(name, before, after)</code> – a function that outputs
		// 	specified attribute value concatenated with <code>before</code>
		// 	and <code>after</code> strings. If attribute doesn\'t exists, the
		// 	empty string will be returned.</li>
		// 	<li><code>node</code> – current node (instance of <code>AbbreviationNode</code>)</li>
		// 	<li><code>name</code> – name of current tag</li>
		// 	<li><code>padding</code> – current string padding, can be used
		// 	for formatting</li>
		// </ul>
		"filter.commentAfter" : "\n<!-- /<%= attr(\"id\", \"#\") %><%= attr(\"class\", \".\") %> -->",

		// A definition of comment that should be placed <i>before</i> matched
		// element when <code>comment</code> filter is applied.
		// For more info, read description of <code>filter.commentAfter</code>
		// property.
		"filter.commentBefore": "",

		// A comma-separated list of attribute names that should exist in abbreviatoin
		// where comment should be added. If you wish to add comment for
		// every element, set this option to <code>*</code>.
		"filter.commentTrigger": "id, class"
	}
}